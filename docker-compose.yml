# docker-compose.yml

version: "3.9"

x-airflow-common: &airflow-common
  image: apache/airflow:3.0.0-python3.11
  platform: linux/amd64
  env_file: .env
  environment: &airflow-env
    AIRFLOW__CORE__EXECUTOR: LocalExecutor
    AIRFLOW__CORE__FERNET_KEY: ${FERNET_KEY}
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres:5432/airflow
    AIRFLOW__API__AUTH_BACKENDS: airflow.api.auth.backend.basic_auth
    AIRFLOW__LOGGING__BASE_LOG_FOLDER: /opt/airflow/logs
    AIRFLOW__LOGGING__REMOTE_LOGGING: "False"
    AIRFLOW__CORE__SIMPLE_AUTH_MANAGER_USERS: admin:admin
    AIRFLOW__CORE__DAGS_FOLDER: /opt/airflow/dags
    AIRFLOW_CMD: airflow scheduler  
  volumes:
    - ./airflow/dags:/opt/airflow/dags 
    - ./airflow/requirements.txt:/requirements.txt
    - ./:/opt/airflow/spotify2youtube
    - ./credentials:/opt/airflow/credentials:ro
    - ./airflow/logs:/opt/airflow/logs
  command: >
    bash -c "
      pip install --upgrade pip setuptools wheel &&
      pip install -r /requirements.txt &&
      exec $${AIRFLOW_CMD}
    "

services:
  postgres:
    image: postgres:16
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U airflow"]
      interval: 5s
      timeout: 3s
      retries: 10

  airflow-init:
    <<: *airflow-common
    environment:
      <<: *airflow-env
      AIRFLOW_CMD: airflow db migrate
    depends_on:
      postgres:
        condition: service_healthy

  airflow-scheduler:
    <<: *airflow-common
    environment:
      <<: *airflow-env
      AIRFLOW_CMD: airflow scheduler
    depends_on:
      postgres:
        condition: service_healthy
      airflow-init:
        condition: service_started
    restart: unless-stopped

  airflow-dag-processor:
    <<: *airflow-common
    environment:
      <<: *airflow-env
      AIRFLOW_CMD: airflow dag-processor
    depends_on:
      airflow-init:
        condition: service_started
    restart: unless-stopped

  airflow-api-server:
    <<: *airflow-common
    ports: ["8080:8080"]
    environment:
      <<: *airflow-env
      AIRFLOW_CMD: airflow api-server
    depends_on:
      airflow-init:
        condition: service_started
    restart: unless-stopped

volumes:
  postgres_data:
  airflow_logs:
